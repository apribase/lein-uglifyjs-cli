(ns leiningen.uglifyjs
  "Run uglifyjs."
  (:require [clojure.java.shell :as shell]
            [clojure.string :as string]
            [me.raynes.fs :as fs]
            [robert.hooke :as hooke]
            [leiningen.compile :as lcompile]
            [leiningen.clean :as lclean]
            [leiningen.help :as lhelp]
            [leiningen.core.main :as lmain]))


(defn- run-uglifyjs-command
  "Run uglifyjs"
  [config]
  (let [{:keys [src output-to options]} config
        command (str "uglifyjs " (string/join " " src)
                     (when options (str " " options))
                     " -o "output-to)]
    (println command)
    (apply shell/sh (string/split command #"\s+"))))


(defn- once
  "Run the :uglifyjs project once."
  [project]
  (when-let [config (:uglifyjs project)]
    (do (-> (:output-to config)
            (fs/parent)
            (fs/mkdirs))
        (as-> (run-uglifyjs-command config) %
          (case (:exit %)
            0 (println (:out %))
            1 (println (:err %)))))))


(defn- clean
  "Remove automatically generated files."
  [project]
  (println "Deleting files generated by lein-uglifyjs.")
  (let [node (:uglifyjs project)]
    (fs/delete (:output-to node))))


(defn- abort [s]
  (println s)
  (lmain/abort))


(defn uglifyjs
  "Run the uglifyjs plugin."
  {:help-arglists '([once clean])
   :subtasks [#'once #'clean]}
  ([project]
     (abort (lhelp/help-for "uglifyjs")))
  ([project subtask & args]
     (case (keyword subtask)
       :once  (once project)
       :clean (clean project)
       (abort (str "Subtask" \" subtask \" "not found. "
                   (lhelp/subtask-help-for *ns* #'uglifyjs))))))


;; activate hooks. (first args) is project.

(defn compile-hook [task & args]
  (apply task args)
  (once (first args)))


(defn clean-hook [task & args]
  (apply task args)
  (clean (first args)))


(defn activate []
  (hooke/add-hook #'lcompile/compile #'compile-hook)
  (hooke/add-hook #'lclean/clean #'clean-hook))
